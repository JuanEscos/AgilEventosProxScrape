name: Scrapy Eventos Prox diario

on:
  schedule:
    - cron: '5 2 * * *'    # 02:05 UTC (≈ 04:05 en Europa/Madrid en verano; 03:05 en invierno)
  workflow_dispatch: {}

jobs:
  run_and_deploy:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias (si existe requirements.txt)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Ejecutar script que genera el CSV
        run: |
          python "./EventosProx.py"

      - name: Localizar CSV y calcular hash/tamaño
        id: csv
        run: |
          set -euo pipefail
          CSV_PATH="$(find . -type f -name 'eventos_prox.csv' -print -quit)"
          if [ -z "$CSV_PATH" ]; then
            echo 'No se encontró eventos_prox.csv'; exit 1
          fi
          echo "csv_path=$CSV_PATH" >> "$GITHUB_OUTPUT"
          sha256sum "$CSV_PATH" | awk '{print $1}' > local.sha256
          echo "local_hash=$(cut -d' ' -f1 local.sha256)" >> "$GITHUB_OUTPUT"
          LOCAL_SIZE=$(stat -c%s "$CSV_PATH")
          echo "local_size=$LOCAL_SIZE" >> "$GITHUB_OUTPUT"

      - name: Listar carpeta remota (antes de subir)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}      # p.ej. agilitydivertidog-com.espacioseguro.com
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}    # p.ej. agilitydivertidog
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}  # /www/NewWeb/Privado
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
          echo "Listando: ${BASE}/"
          curl --fail --ssl-reqd --user "${FTP_USERNAME}:${FTP_PASSWORD}" "${BASE}/" -l || true

      - name: "Subir CSV por FTPS (robusto: binario, no EPSV, temp+rename)"
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          FULL_DIR="${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
          BASE="ftp://${FTP_SERVER}${FULL_DIR}"
          FILE="eventos_prox.csv"
          TMP="${BASE}/${FILE}.part"
          FINAL="${BASE}/${FILE}"

          echo "Subiendo temporal: $TMP"
          curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
               --quote "TYPE I" --quote "PBSZ 0" --quote "PROT P" \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "${{ steps.csv.outputs.csv_path }}" "$TMP"

          echo "Renombrando a definitivo…"
          curl --fail --ssl-reqd \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --quote "RNFR ${FULL_DIR}/${FILE}.part" \
               --quote "RNTO ${FULL_DIR}/${FILE}" \
               "ftp://${FTP_SERVER}/"

      - name: Verificar remoto (descargar y comparar hash/tamaño)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
          FILE="eventos_prox.csv"

          echo "Listando tras subir: ${BASE}/"
          curl --fail --ssl-reqd --user "${FTP_USERNAME}:${FTP_PASSWORD}" "${BASE}/" -l

          echo "Descargando para verificación…"
          curl --fail --ssl-reqd --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --output remote.csv "${BASE}/${FILE}"

          sha256sum remote.csv | awk '{print $1}' > remote.sha256
          echo "Hash local : ${{ steps.csv.outputs.local_hash }}"
          echo "Hash remoto: $(cut -d' ' -f1 remote.sha256)"
          diff -q local.sha256 remote.sha256

          REMOTE_SIZE=$(stat -c%s remote.csv)
          echo "Tamaño remoto: $REMOTE_SIZE bytes"
          test "$REMOTE_SIZE" -eq "${{ steps.csv.outputs.local_size }}"
          echo "OK: hash y tamaño coinciden"
